import asyncio
from datetime import datetime, timedelta
from aiogram import Bot, types
from aiogram.exceptions import TelegramForbiddenError
from aiogram.enums import ChatMemberStatus
from src.models.user import User
from src.models.payments import Payment
from src.repositories.db import Repository
from src.services.crypto_service import CryptoService
from src.logger.logger import Logger

class BotService:
    TARIFFS = {
        "test" : {"days" : 1, "price" : 5, "name" : "–¢–µ—Å—Ç–æ–≤—ã–π (1 –¥–µ–Ω—å)"},
        "1month" : {"days" : 30, "price" : 70, "name" : "1 –º–µ—Å—è—Ü"},
        "3months" : {"days" : 90, "price" : 180, "name" : "3 –º–µ—Å—è—Ü–∞ (–í—ã–≥–æ–¥–∞ 50$)"},
        "6months" : {"days" : 180, "price" : 320, "name" : "6 –º–µ—Å—è—Ü–µ–≤ (–í—ã–≥–æ–¥–∞ 100$)"},
        "12 months" : {"days" : 365, "price" : 600, "name" : "12 –º–µ—Å—è—Ü–µ–≤ (–í—ã–≥–æ–¥–∞ 200$)"}
    }

    SUPPORTED_EXCHANGES = ["Binance", "Bybit", "OKX", "BingX"]
    def __init__(self, repo: Repository, crypto_service: CryptoService, group_id: int, logger: Logger):
        self.repo = repo
        self.crypto_service = crypto_service
        self.group_id = group_id
        self.logger = logger
    
    async def is_bot_in_group(self, bot: Bot) -> bool:
        try:
            member = await bot.get_chat_member(chat_id=self.group_id, user_id=bot.id)
            return member.status in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.MEMBER]
        except TelegramForbiddenError:
            self.logger.error("–ë–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return False
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ: {e}")
            return False
    
    async def request_exchange(self, user_id: int, message: types.Message, bot: Bot):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for exchange in self.SUPPORTED_EXCHANGES:
            keyboard.add(types.KeyboardButton(exchange))
        await bot.send_message(
            chat_id=user_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –±–∏—Ä–∂—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤:",
            reply_markup=keyboard
        )
        self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –±–∏—Ä–∂—É –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
    
    async def request_api_key(self, user_id: int, message: types.Message, bot: Bot):
        await bot.send_message(
            user_id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ API-–∫–ª—é—á –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –±–∏—Ä–∂–∏.\n\n"
            "üîí <b>–û –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:</b>\n"
            "1. –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à API-–∫–ª—é—á —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–∞–ª–∞–Ω—Å–∞ –∏–ª–∏ —Ç–æ—Ä–≥–æ–≤–æ–π –∏—Å—Ç–æ—Ä–∏–∏).\n"
            "2. –í–∞—à –∫–ª—é—á –Ω–∞–¥–µ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—Å—è –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.\n"
            "3. –ú—ã –Ω–µ –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—à API-–∫–ª—é—á –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –±–µ–∑ –≤–∞—à–µ–≥–æ —è–≤–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è.\n"
            "4. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à API-–∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Ç–æ–ª—å–∫–æ —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ —á—Ç–µ–Ω–∏–µ (–±–µ–∑ –ø—Ä–∞–≤ –Ω–∞ —Ç–æ—Ä–≥–æ–≤–ª—é –∏–ª–∏ –≤—ã–≤–æ–¥).\n\n"
            "–í–≤–µ–¥–∏—Ç–µ API-–∫–ª—é—á:",
            parse_mode="HTML",
            reply_markup=types.ReplyKeyboardRemove()
        )
