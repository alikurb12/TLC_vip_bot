import asyncio
from datetime import datetime, timedelta
from aiogram import Bot, types
from aiogram.exceptions import TelegramForbiddenError
from models.user import User
from models.payment import Payment
from repositories.db import Repository
from services.crypto_service import CryptoService
from logger.logger import Logger

class BotService:
    TARIFFS = {
        "regular": {
            "test": {"days": 1, "price": 5, "name": "–¢–µ—Å—Ç–æ–≤—ã–π (1 –¥–µ–Ω—å)"},
            "1month": {"days": 30, "price": 70, "name": "1 –º–µ—Å—è—Ü"},
            "3months": {"days": 90, "price": 160, "name": "3 –º–µ—Å—è—Ü–∞ (–í—ã–≥–æ–¥–∞ 50$)"},
            "6months": {"days": 180, "price": 320, "name": "6 –º–µ—Å—è—Ü–µ–≤ (–í—ã–≥–æ–¥–∞ 100$)"},
            "12months": {"days": 365, "price": 640, "name": "12 –º–µ—Å—è—Ü–µ–≤ (–í—ã–≥–æ–¥–∞ 200$)"}
        },
        "referral": {
            "test": {"days": 1, "price": 2.5, "name": "–¢–µ—Å—Ç–æ–≤—ã–π (1 –¥–µ–Ω—å, —Ä–µ—Ñ–µ—Ä–∞–ª)"},
            "1month": {"days": 30, "price": 35, "name": "1 –º–µ—Å—è—Ü (—Ä–µ—Ñ–µ—Ä–∞–ª)"},
            "3months": {"days": 90, "price": 80, "name": "3 –º–µ—Å—è—Ü–∞ (—Ä–µ—Ñ–µ—Ä–∞–ª, –í—ã–≥–æ–¥–∞ 25$)"},
            "6months": {"days": 180, "price": 160, "name": "6 –º–µ—Å—è—Ü–µ–≤ (—Ä–µ—Ñ–µ—Ä–∞–ª, –í—ã–≥–æ–¥–∞ 50$)"},
            "12months": {"days": 365, "price": 320, "name": "12 –º–µ—Å—è—Ü–µ–≤ (—Ä–µ—Ñ–µ—Ä–∞–ª, –í—ã–≥–æ–¥–∞ 100$)"}
        }
    }

    SUPPORTED_EXCHANGES = ["Binance", "Bybit", "Kraken", "OKX"]

    def __init__(self, repo: Repository, crypto_service: CryptoService, logger: Logger):
        self.repo = repo
        self.crypto_service = crypto_service
        self.logger = logger

    def get_profile_text(self, user: User) -> str:
        if not user:
            return (
                "üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n"
                "–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: <b>–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</b>\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏."
            )
        subscription_status = (
            f"–ê–∫—Ç–∏–≤–Ω–∞ –¥–æ: <b>{user.subscription_end.strftime('%Y-%m-%d %H:%M:%S')}</b>"
            if user.subscription_end and user.subscription_end > datetime.now()
            else "–ò—Å—Ç–µ–∫–ª–∞ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        )
        subscription_type = (
            "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è" if user.is_referral else "–û–±—ã—á–Ω–∞—è" if user.subscription_type else "–ù–µ –≤—ã–±—Ä–∞–Ω–∞"
        )
        exchange_info = user.exchange if user.exchange else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        api_key_info = "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if user.api_key else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        return (
            f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n"
            f"ID: <b>{user.user_id}</b>\n"
            f"Username: <b>@{user.username}</b>\n"
            f"–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: <b>{subscription_type}</b>\n"
            f"–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: <b>{subscription_status}</b>\n"
            f"–ë–∏—Ä–∂–∞: <b>{exchange_info}</b>\n"
            f"API-–∫–ª—é—á: <b>{api_key_info}</b>"
        )

    async def request_exchange(self, user_id: int, message: types.Message, bot: Bot):
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text=exchange, callback_data=f"exchange:{exchange}")]
            for exchange in self.SUPPORTED_EXCHANGES
        ])
        keyboard.inline_keyboard.append([
            types.InlineKeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support"),
            types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ])
        await bot.send_message(
            user_id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –±–∏—Ä–∂—É, —Å –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ:",
            reply_markup=keyboard
        )

    async def request_api_key(self, user_id: int, message: types.Message, bot: Bot):
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await bot.send_message(
            user_id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ API-–∫–ª—é—á –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –±–∏—Ä–∂–∏.\n\n"
            "üîí <b>–û –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:</b>\n"
            "1. –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à API-–∫–ª—é—á —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–∞–ª–∞–Ω—Å–∞ –∏–ª–∏ —Ç–æ—Ä–≥–æ–≤–æ–π –∏—Å—Ç–æ—Ä–∏–∏).\n"
            "2. –í–∞—à –∫–ª—é—á –Ω–∞–¥–µ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—Å—è –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.\n"
            "3. –ú—ã –Ω–µ –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—à API-–∫–ª—é—á –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –±–µ–∑ –≤–∞—à–µ–≥–æ —è–≤–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è.\n"
            "4. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à API-–∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Ç–æ–ª—å–∫–æ —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ —á—Ç–µ–Ω–∏–µ (–±–µ–∑ –ø—Ä–∞–≤ –Ω–∞ —Ç–æ—Ä–≥–æ–≤–ª—é –∏–ª–∏ –≤—ã–≤–æ–¥).\n\n"
            "–í–≤–µ–¥–∏—Ç–µ API-–∫–ª—é—á:",
            parse_mode="HTML",
            reply_markup=keyboard
        )

    async def save_exchange_and_api(self, user_id: int, exchange: str, api_key: str, username: str = None):
        user = self.repo.get_user(user_id) or User(user_id=user_id, username=username)
        user.exchange = exchange
        user.api_key = api_key
        user.username = username or user.username
        self.logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: user_id={user_id}, exchange={exchange}, api_key={api_key}, username={user.username}")
        try:
            self.repo.save_user(user)
            self.logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∏—Ä–∂–∏ –∏ API –¥–ª—è {user_id}: {str(e)}")
            raise

    async def process_payment(self, user_id: int, tariff_id: str, message: types.Message, bot: Bot):
        user = self.repo.get_user(user_id)
        subscription_type = user.subscription_type if user and user.subscription_type else "regular"
        tariff = self.TARIFFS[subscription_type].get(tariff_id)
        if not tariff:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ.")
            return

        invoice = self.crypto_service.create_invoice(user_id, tariff["price"], tariff["name"])
        if not invoice or not invoice.get("ok") or "result" not in invoice:
            self.logger.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞")
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        invoice_id = invoice["result"]["invoice_id"]
        pay_url = invoice["result"]["pay_url"]

        payment = Payment(
            invoice_id=invoice_id,
            user_id=user_id,
            amount=tariff["price"],
            currency="USDT",
            status="created"
        )
        try:
            self.repo.save_payment(payment)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.")
            return

        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_payment:{tariff_id}")],
            [types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await bot.send_message(
            user_id,
            f"üí≥ –û–ø–ª–∞—Ç–∏—Ç–µ {tariff['price']}$ –∑–∞ —Ç–∞—Ä–∏—Ñ <b>{tariff['name']}</b>\n"
            f"üîó <a href='{pay_url}'>–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã</a>\n\n"
            f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            parse_mode="HTML",
            reply_markup=keyboard
        )
        await message.delete()

    async def check_payment(self, user_id: int, message: types.Message, bot: Bot, username: str = None, tariff_id: str = None):
        payment = self.repo.get_last_payment(user_id)
        if not payment:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            await message.answer("–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)
            return

        invoice = self.crypto_service.check_invoice(payment.invoice_id)
        if not invoice or not invoice.get("ok") or not invoice["result"]["items"]:
            self.logger.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞")
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            await message.answer("–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)
            return

        if invoice["result"]["items"][0]["status"] != "paid":
            await message.answer("–ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            await message.answer("–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)
            return

        amount = float(invoice["result"]["items"][0]["amount"])
        self.logger.info(f"–ü–æ–ª—É—á–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞: {amount}, tariff_id: {tariff_id}")
        user = self.repo.get_user(user_id)
        subscription_type = user.subscription_type if user and user.subscription_type else "regular"
        tariff_id = next((tid for tid, t in self.TARIFFS[subscription_type].items() if abs(t["price"] - amount) < 0.01), None)
        if not tariff_id:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è —Å—É–º–º—ã: {amount}")
            await message.answer("–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            await message.answer("–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)
            return

        current = datetime.now()
        if user and user.subscription_end and user.subscription_end > current:
            current = user.subscription_end

        new_end = current + timedelta(days=self.TARIFFS[subscription_type][tariff_id]["days"])
        user = User(
            user_id=user_id,
            subscription_end=new_end,
            exchange=user.exchange if user else None,
            api_key=user.api_key if user else None,
            username=username or (user.username if user else None),
            is_referral=user.is_referral if user else False,
            subscription_type=subscription_type
        )
        try:
            self.repo.save_user(user)
            self.repo.update_payment_status(payment.invoice_id, "paid")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.")
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            await message.answer("–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)
            return

        await message.answer(
            f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: <b>{new_end.strftime('%Y-%m-%d %H:%M:%S')}</b>",
            parse_mode="HTML"
        )
        profile_text = self.get_profile_text(user)
        keyboard = self.get_profile_keyboard(user)
        await bot.send_message(user_id, profile_text, parse_mode="HTML", reply_markup=keyboard)
        
        if not user.exchange:
            await self.request_exchange(user_id, message, bot)

    async def check_subscriptions(self, bot: Bot):
        while True:
            try:
                expired_users = self.repo.get_expired_users()
                for user in expired_users:
                    try:
                        await bot.send_message(user.user_id, "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –µ—ë.")
                    except TelegramForbiddenError:
                        self.logger.error(f"–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.user_id}")
                    except Exception as e:
                        self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}: {e}")
                    self.repo.delete_user(user.user_id)
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
            await asyncio.sleep(3600)