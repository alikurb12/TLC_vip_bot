from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from services.bot_service import BotService
from logger.logger import Logger
from datetime import datetime
from models.user import User

class PaymentStates(StatesGroup):
    waiting_for_payment = State()
    waiting_for_exchange = State()
    waiting_for_api_key = State()

class Handler:
    def __init__(self, bot: Bot, bot_service: BotService, logger: Logger):
        self.bot = bot
        self.bot_service = bot_service
        self.logger = logger
        self.router = Router()
        self.dp = Dispatcher(storage=MemoryStorage())
        self.dp.include_router(self.router)
        self.register_handlers()

    def register_handlers(self):
        self.router.message(Command("start"))(self.handle_start)
        self.router.message(Command("help"))(self.handle_help)
        self.router.callback_query(F.data.startswith("tariff:"))(self.handle_tariff)
        self.router.callback_query(F.data.startswith("check_payment:"))(self.handle_check_payment)
        self.router.message(PaymentStates.waiting_for_exchange, F.text.in_(self.bot_service.SUPPORTED_EXCHANGES))(self.handle_exchange)
        self.router.message(PaymentStates.waiting_for_api_key)(self.handle_api_key)

    async def start(self):
        await self.dp.start_polling(self.bot)

    async def handle_start(self, message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        username = message.from_user.username
        self.logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è user_id: {user_id}, username: {username}")
        try:
            self.logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–ª—è user_id: {user_id}")
            user = self.bot_service.repo.get_user(user_id)
            self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {user}")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º username, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if user:
                self.logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ username –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}")
                user.username = username
                self.bot_service.repo.save_user(user)
            else:
                self.logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å user_id: {user_id}, username: {username}")
                user = User(user_id=user_id, username=username)
                self.bot_service.repo.save_user(user)

            if user and user.subscription_end and user.subscription_end > datetime.now():
                text = f"‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ <b>{user.subscription_end.strftime('%Y-%m-%d %H:%M:%S')}</b>"
                self.logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–ª—è user_id: {user_id}, –∫–æ–Ω–µ—Ü –ø–æ–¥–ø–∏—Å–∫–∏: {user.subscription_end}")
                if not user.exchange:
                    self.logger.info(f"–ó–∞–ø—Ä–æ—Å –±–∏—Ä–∂–∏ –¥–ª—è user_id: {user_id}")
                    await self.bot_service.request_exchange(user_id, message, self.bot)
                    await state.set_state(PaymentStates.waiting_for_exchange)
                    return
                await message.answer(text, parse_mode="HTML")
            else:
                keyboard = self.get_tariffs_keyboard()
                text = "‚ùóÔ∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –µ—ë:" if user else "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:"
                self.logger.info(f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è user_id: {user_id}")
                await message.answer(text, reply_markup=keyboard)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è {user_id}: {str(e)}")
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏.")

    async def handle_help(self, message: types.Message):
        await message.answer(
            "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É: <a href='https://t.me/TradersLiveCommunity'>@TradersLiveCommunity</a>",
            parse_mode="HTML"
        )

    async def handle_tariff(self, callback_query: types.CallbackQuery, state: FSMContext):
        tariff_id = callback_query.data.split(":")[1]
        user_id = callback_query.from_user.id
        username = callback_query.from_user.username
        self.logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞—Ä–∏—Ñ–∞ {tariff_id} –¥–ª—è user_id: {user_id}")
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º username –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–ª–∞—Ç–µ–∂–∞
            user = self.bot_service.repo.get_user(user_id)
            if user:
                user.username = username
                self.bot_service.repo.save_user(user)
            else:
                user = User(user_id=user_id, username=username)
                self.bot_service.repo.save_user(user)

            await self.bot_service.process_payment(user_id, tariff_id, callback_query.message, self.bot)
            await state.set_state(PaymentStates.waiting_for_payment)
            await callback_query.answer()
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞—Ä–∏—Ñ–∞ {tariff_id} –¥–ª—è user_id: {user_id}: {e}")
            await callback_query.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∞—Ä–∏—Ñ–∞.")

    async def handle_check_payment(self, callback_query: types.CallbackQuery, state: FSMContext):
        user_id = callback_query.from_user.id
        username = callback_query.from_user.username
        tariff_id = callback_query.data.split(":")[1] if ":" in callback_query.data else "test"
        self.logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã –¥–ª—è user_id: {user_id}, tariff_id: {tariff_id}")
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º username –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–ª–∞—Ç–µ–∂–∞
            user = self.bot_service.repo.get_user(user_id)
            if user:
                user.username = username
                self.bot_service.repo.save_user(user)
            else:
                user = User(user_id=user_id, username=username)
                self.bot_service.repo.save_user(user)

            await self.bot_service.check_payment(user_id, callback_query.message, self.bot, username, tariff_id)
            await state.clear()
            await callback_query.answer()
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è user_id: {user_id}: {e}")
            await callback_query.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞.")

    async def handle_exchange(self, message: types.Message, state: FSMContext):
        exchange = message.text
        user_id = message.from_user.id
        username = message.from_user.username
        if exchange not in self.bot_service.SUPPORTED_EXCHANGES:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±–∏—Ä–∂—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.")
            return
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º username –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –±–∏—Ä–∂–∏
            user = self.bot_service.repo.get_user(user_id)
            if user:
                user.username = username
                self.bot_service.repo.save_user(user)
            else:
                user = User(user_id=user_id, username=username)
                self.bot_service.repo.save_user(user)

            await state.update_data(exchange=exchange)
            await self.bot_service.request_api_key(user_id, message, self.bot)
            await state.set_state(PaymentStates.waiting_for_api_key)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∏—Ä–∂–∏ –¥–ª—è {user_id}: {e}")
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –±–∏—Ä–∂–∏.")

    async def handle_api_key(self, message: types.Message, state: FSMContext):
        api_key = message.text
        user_id = message.from_user.id
        username = message.from_user.username
        data = await state.get_data()
        exchange = data.get("exchange")
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º username –≤–º–µ—Å—Ç–µ —Å –±–∏—Ä–∂–µ–π –∏ API
            await self.bot_service.save_exchange_and_api(user_id, exchange, api_key, username)
            await message.answer(
                f"‚úÖ –ë–∏—Ä–∂–∞ ({exchange}) –∏ API-–∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!",
                reply_markup=types.ReplyKeyboardRemove()
            )
            await state.clear()
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è API-–∫–ª—é—á–∞ –¥–ª—è {user_id}: {e}")
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ API-–∫–ª—é—á–∞.")

    def get_tariffs_keyboard(self) -> types.InlineKeyboardMarkup:
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[])
        for tariff_id, tariff in self.bot_service.TARIFFS.items():
            keyboard.inline_keyboard.append([
                types.InlineKeyboardButton(
                    text=f"{tariff['name']} - {tariff['price']}$",
                    callback_data=f"tariff:{tariff_id}"
                )
            ])
        return keyboard